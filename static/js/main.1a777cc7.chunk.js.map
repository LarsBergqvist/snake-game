{"version":3,"sources":["reportWebVitals.js","reducers/actions.js","reducers/highscore-functions.js","reducers/grid-functions.js","constants.js","game-configs.js","reducers/snake-game-reducer.js","views/LeaderBoardView.js","reducers/thunks.js","views/EnterNameView.js","views/GameStatusView.js","views/TileView.js","views/GridView.js","views/GameHeaderView.js","views/GameView.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INIT_GAME","HIGHSCORE_LIST_LOADED","NAME_CHANGED","NAME_SUBMITTED","HIGHSCORE_LIST_SAVED","MOVE_SNAKE","CHANGE_DIRECTION","changeDirection","direction","type","moveSnake","getIndexInHighScoreList","newUserId","score","highScoreList","resultsCopy","results","map","r","id","push","sort","a","b","compareScores","idxInHighScoreList","findIndex","maxSize","generateGrid","size","snake","food","newGrid","i","row","Math","floor","col","y","x","length","idx","getNewFoodPos","currentPoints","fromBorder","validPosFound","newPos","undefined","random","pos","isValidMove","oldDirection","newDirection","getNextHeadPosition","oldPosition","gameConfigs","process","initialState","points","gameStarted","gameComplete","gridViewModel","gameId","gameName","highScorePosition","userName","userId","highScoreListSaved","directionsQueue","nameSubmitted","snakeGame","state","action","snakeTemplate","t","newFoodPos","Object","assign","name","imageNumber","highScoreListId","highscorelistid","pop","shift","nextPos","typeOnNextPos","uuidv4","gameLoopInterval","foodWasTaken","unshift","newTiles","LeaderBoardView","props","rows","className","Date","utcDateTime","toLocaleDateString","unit","runGameLoop","dispatch","getState","interval","setInterval","clearInterval","fetchHighScoreList","url","get","result","console","error","updateHighScoreList","body","post","getUrl","fetch","headers","ApiKey","response","ok","Error","json","method","JSON","stringify","EnterNameView","connect","onSubmitNameToHighScore","onNameChanged","nameChanged","useState","setUserName","minLength","maxLength","required","onChange","event","target","value","disabled","onClick","GameStatus","onInitGame","defaultProps","GameStatusView","initGame","getStyleForTile","backgroundColor","outline","outlineOffset","max","TileView","style","GridView","onChangeDirection","tileWidth","tileWrapperStyle","width","tileContainerStyle","gridTemplateColumns","handlers","useSwipeable","onSwipedRight","onSwipedLeft","onSwipedUp","onSwipedDown","delta","preventDefaultTouchmoveEvent","trackTouch","trackMouse","rotationAngle","GameHeaderView","Game","document","addEventListener","keyCode","preventDefault","this","React","Component","GameView","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1a777cc7.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","export const INIT_GAME = 'INIT_GAME';\nexport const HIGHSCORE_LIST_LOADED = 'HIGHSCORE_LIST_LOADED';\nexport const NAME_CHANGED = 'NAME_CHANGED';\nexport const NAME_SUBMITTED = 'NAME_SUBMITTED';\nexport const HIGHSCORE_LIST_SAVED = 'HIGHSCORE_LIST_SAVED';\nexport const MOVE_SNAKE = 'MOVE_SNAKE';\nexport const CHANGE_DIRECTION = 'CHANGE_DIRECTION';\n\nexport function initGame(gameId) {\n    return { type: INIT_GAME, gameId };\n}\n\nexport function changeDirection(direction) {\n    return { type: CHANGE_DIRECTION, direction };\n}\n\nexport function moveSnake() {\n    return { type: MOVE_SNAKE };\n}\n\nexport function highScoreListLoaded(highScoreList) {\n    return { type: HIGHSCORE_LIST_LOADED, highScoreList };\n}\n\nexport function nameChanged(name) {\n    return { type: NAME_CHANGED, name };\n}\n\nexport function nameSubmitted() {\n    return { type: NAME_SUBMITTED };\n}\n\nexport function highScoreListSaved(highScoreList) {\n    return { type: HIGHSCORE_LIST_SAVED, highScoreList };\n}\n\n","\nfunction compareScores(a, b) {\n    if (a.score >= b.score) {\n        return -1;\n    }\n    if (a.score < b.score) {\n        return 1;\n    }\n}\n\nexport function getIndexInHighScoreList(newUserId, score, highScoreList) {\n    const results = [...highScoreList.results];\n    const resultsCopy = results.map(r => {\n        return {\n            id: r.id,\n            score: r.score\n        }\n    });\n    resultsCopy.push({\n        id: newUserId,\n        score\n    });\n\n    resultsCopy.sort((a, b) => compareScores(a, b));\n\n    let idxInHighScoreList = resultsCopy.findIndex(r => r.id === newUserId);\n    if (idxInHighScoreList > -1 && (idxInHighScoreList + 1 <= highScoreList.maxSize)) {\n        return idxInHighScoreList;\n    } else {\n        return -1;\n    }\n}","import { Down, Id_Border, Id_Empty, Id_Food, Id_SnakeSegMin, Left, Right, Up } from '../constants';\n\nexport function generateGrid(size, snake, food) {\n    const newGrid = [];\n    for (let i = 0; i < size * size; i++) {\n        const row = Math.floor(i / size);\n        const col = i % size;\n        if (col === 0 || col === (size - 1) || row === 0 || row === (size - 1)) {\n            newGrid.push(Id_Border);\n        } else {\n            newGrid.push(Id_Empty);\n        }\n    }\n\n    if (food) {\n        const idx = food.y * size + food.x;\n        newGrid[idx] = Id_Food;\n    }\n\n    for (let i = 0; i < snake.length; i++) {\n        let x = snake[i].x;\n        let y = snake[i].y;\n        const idx = y * size + x;\n        if (idx < size * size) {\n            newGrid[idx] = Id_SnakeSegMin + i;\n        }\n    }\n    return newGrid;\n}\n\nexport function getNewFoodPos(size, snake, currentPoints) {\n    let fromBorder = 3;\n    if (currentPoints > 30) {\n        fromBorder = 1;\n    } else if (currentPoints > 20) {\n        fromBorder = 2\n    }\n    let validPosFound = false;\n    let newPos = undefined;\n    while (!validPosFound) {\n        const x = Math.floor(Math.random() * (size - fromBorder * 2) + fromBorder);\n        const y = Math.floor(Math.random() * (size - fromBorder * 2) + fromBorder);\n        let idx = snake.findIndex(pos => pos.x === x && pos.y === y);\n        if (idx === -1) {\n            validPosFound = true;\n            newPos = { x, y };\n        }\n    }\n\n    return newPos;\n}\n\nexport function isValidMove(oldDirection, newDirection) {\n    if ((newDirection === oldDirection) ||\n        (newDirection === Left && oldDirection === Right) ||\n        (newDirection === Right && oldDirection === Left) ||\n        (newDirection === Up && oldDirection === Down) ||\n        (newDirection === Down && oldDirection === Up)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function getNextHeadPosition(direction, oldPosition) {\n    let x = oldPosition.x;\n    let y = oldPosition.y;\n    if (direction === Up) {\n        y--;\n    } else if (direction === Down) {\n        y++;\n    } else if (direction === Left) {\n        x--;\n    } else {\n        x++;\n    }\n\n    return { x, y };\n}\n","export const GridWidth = 300;\nexport const NumImages = 18;\nexport const GameId_Medium = 0;\n\nexport const Right = 1;\nexport const Left = 2;\nexport const Up = 3;\nexport const Down = 4;\n\nexport const Id_Empty = 0;\nexport const Id_Border = 1;\nexport const Id_Food = 2;\nexport const Id_SnakeSegMin = 3;\n","export const gameConfigs = [\n    {\n        'name': 'Snake Game',\n        'size': 30,\n        'highscorelistid': process.env.REACT_APP_HIGHSCORELISTID_SNAKEGAME0\n    }\n]\n","import {\n    INIT_GAME,\n    HIGHSCORE_LIST_LOADED,\n    NAME_CHANGED,\n    HIGHSCORE_LIST_SAVED,\n    MOVE_SNAKE,\n    CHANGE_DIRECTION,\n    NAME_SUBMITTED\n} from './actions';\nimport { getIndexInHighScoreList } from './highscore-functions';\nimport { generateGrid, isValidMove, getNextHeadPosition, getNewFoodPos } from './grid-functions';\nimport { gameConfigs } from '../game-configs';\nimport { Id_Border, Id_Food, Id_SnakeSegMin, Right } from '../constants';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst initialState = {\n    points: 0,\n    gameStarted: false,\n    gameComplete: false,\n    gridViewModel: [],\n    size: undefined,\n    gameId: undefined,\n    gameName: undefined,\n    direction: Right,\n    snake: undefined,\n    food: undefined,\n    highScoreList: undefined,\n    highScorePosition: -1,\n    userName: undefined,\n    userId: undefined,\n    highScoreListSaved: false,\n    directionsQueue: [],\n    nameSubmitted: false\n};\n\n\n//\n// The reducer for the game\n//\nfunction snakeGame(state = initialState, action) {\n    switch (action.type) {\n        case INIT_GAME: {\n            const size = gameConfigs[action.gameId].size;\n            const snakeTemplate = [{ x: 3, y: 1 }, { x: 2, y: 1 }, { x: 1, y: 1 }, { x: 0, y: 5 }];\n            const snake = snakeTemplate.map(t => ({ x: t.x + 1, y: size / 2 }));\n            const newFoodPos = getNewFoodPos(size, snake, 0);\n            return Object.assign({}, initialState, {\n                gameId: action.gameId,\n                size,\n                gameName: gameConfigs[action.gameId].name,\n                imageNumber: action.imageNumber,\n                highScoreListId: gameConfigs[action.gameId].highscorelistid,\n                food: newFoodPos,\n                gridViewModel: generateGrid(gameConfigs[action.gameId].size, snake, newFoodPos),\n                gameStarted: true,\n                snake,\n                nameSubmitted: false\n            });\n        }\n\n        case CHANGE_DIRECTION: {\n            if (action.direction === state.directionsQueue[0]) {\n                // Ignore multiple identical directions\n                return state;\n            }\n\n            // Keep the last 3 direction actions\n            let directionsQueue = [...state.directionsQueue];\n            if (directionsQueue.length >= 3) {\n                directionsQueue.pop();\n            }\n            directionsQueue.push(action.direction);\n\n            return Object.assign({}, state, { directionsQueue });\n        }\n\n        case MOVE_SNAKE: {\n            if (state.gameComplete || !state.gameStarted) {\n                return state;\n            }\n\n            let directionsQueue = [...state.directionsQueue];\n            let newDirection = directionsQueue.shift();\n            let direction = state.direction;\n            if (newDirection) {\n                if (isValidMove(direction, newDirection)) {\n                    direction = newDirection;\n                } else {\n                    return Object.assign({}, state, { directionsQueue });\n                }\n            }\n            const snake = [...state.snake];\n            const nextPos = getNextHeadPosition(direction, snake[0]);\n\n            const typeOnNextPos = state.gridViewModel[nextPos.y * state.size + nextPos.x];\n\n            if ((typeOnNextPos === Id_Border) || (typeOnNextPos >= Id_SnakeSegMin)) {\n                //\n                // Snake moved into border or into itself\n                //\n\n                if (state.highScoreList) {\n                    const newUserId = uuidv4();\n                    const idxInHighScoreList = getIndexInHighScoreList(newUserId, state.points, state.highScoreList);\n                    if (idxInHighScoreList > -1) {\n                        // User made it into the leaderboard\n                        return Object.assign({}, state, {\n                            highScorePosition: idxInHighScoreList + 1,\n                            gameComplete: true,\n                            userId: newUserId,\n                            directionsQueue\n                        });\n                    } else {\n                        // User dit not make it into the leaderboard\n                        return Object.assign({}, state, {\n                            highScorePosition: idxInHighScoreList + 1,\n                            gameComplete: true,\n                            directionsQueue\n                        });\n                    }\n                }\n\n                return Object.assign({}, state, { gameComplete: true, directionsQueue });\n            }\n\n            let gameLoopInterval = state.gameLoopInterval;\n            let points = state.points;\n            const foodWasTaken = typeOnNextPos === Id_Food;\n            if (!foodWasTaken) {\n                // Remove the first segment of the snake\n                snake.pop();\n            } else {\n                points++;\n            }\n\n            // Insert the new pos as the first segment\n            snake.unshift(nextPos);\n\n            let food = foodWasTaken ? getNewFoodPos(state.size, snake, state.points) : Object.assign({}, state.food);\n\n            const newTiles = generateGrid(state.size, snake, food);\n            return Object.assign({}, state, { snake, gridViewModel: newTiles, food, points, direction, directionsQueue, gameLoopInterval });\n        }\n        case HIGHSCORE_LIST_LOADED: {\n            return Object.assign({}, state, {\n                highScoreList: action.highScoreList\n            });\n        }\n        case NAME_CHANGED: {\n            return Object.assign({}, state, {\n                userName: action.name\n            });\n        }\n        case NAME_SUBMITTED: {\n            return Object.assign({}, state,\n                { nameSubmitted: true }\n            );\n        }\n        case HIGHSCORE_LIST_SAVED: {\n            return Object.assign({}, state, {\n                highScoreListSaved: true,\n                highScoreList: action.highScoreList\n            });\n        }\n        default:\n            return state;\n    }\n}\n\nexport default snakeGame;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LeaderBoardView = (props) => {\n    if (!props.highScoreList) return <></>;\n    const rows = props.highScoreList.results.map((r, idx) => {\n        let className = '';\n        if (props.userId && r.id === props.userId) {\n            className = 'user-row-in-highscore';\n        }\n        return <tr className={className} key={idx + 1}>\n            <td>#{idx + 1}</td\n            ><td>{r.userName}</td>\n            <td className='date-column'>{(new Date(r.utcDateTime)).toLocaleDateString()}</td>\n            <td>{r.score}</td></tr>;\n    });\n    return <>\n        <div>\n            <h3>{props.highScoreList.name}</h3>\n            <table className=\"highscoretable\">\n                <thead>\n                    <tr>\n                        <th>Position</th>\n                        <th>Name</th>\n                        <th className='date-column'>Date</th>\n                        <th>{props.highScoreList.unit}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {rows}\n                </tbody>\n            </table>\n        </div>\n    </>;\n}\n\nLeaderBoardView.propTypes = {\n    highScoreList: PropTypes.object,\n    name: PropTypes.string,\n    unit: PropTypes.string,\n    userId: PropTypes.string\n};\n\nexport default LeaderBoardView;\n","import {\n    HIGHSCORE_LIST_LOADED,\n    HIGHSCORE_LIST_SAVED,\n    moveSnake,\n    NAME_SUBMITTED\n} from './actions';\n\nexport async function runGameLoop(dispatch, getState) {\n    let interval = setInterval(() => {\n        if (getState().gameComplete) {\n            clearInterval(interval);\n        } else {\n            dispatch(moveSnake());\n        }\n    }, 100);\n}\n\nexport async function fetchHighScoreList(dispatch, getState) {\n    if (process.env.REACT_APP_APIURL.length === 0) {\n        return;\n    }\n    let url = `${process.env.REACT_APP_APIURL}/highscore-lists/${getState().highScoreListId}`;\n    try {\n        let result = await get(url);\n        dispatch({\n            type: HIGHSCORE_LIST_LOADED,\n            highScoreList: result\n        });\n    } catch (e) {\n        console.error('Network request failed');\n    }\n}\n\nexport async function updateHighScoreList(dispatch, getState) {\n    if (process.env.REACT_APP_APIURL.length === 0) {\n        return;\n    }\n\n    let url = `${process.env.REACT_APP_APIURL}/highscore-lists/${getState().highScoreListId}/game-results`;\n\n    var state = getState();\n\n    if (!state.userName || state.userName.length === 0 || state.nameSubmitted) {\n        return;\n    }\n\n    dispatch({\n        type: NAME_SUBMITTED\n    });\n\n    let body = {\n        userName: state.userName,\n        score: state.points,\n        id: state.userId\n    };\n\n    try {\n        await post(url, body);\n    } catch (e) {\n        console.error('Network request failed3');\n        return;\n    }\n\n    let getUrl = `${process.env.REACT_APP_APIURL}/highscore-lists/${getState().highScoreListId}`;\n    let result = await get(getUrl);\n\n    dispatch({\n        type: HIGHSCORE_LIST_SAVED, highScoreList: result\n    });\n}\n\nasync function get(url) {\n    try {\n        let response = await fetch(url, {\n            headers: {\n                ApiKey: `${process.env.REACT_APP_APIKEY}`\n            }\n        });\n        if (!response.ok) {\n            throw Error('Network request failed');\n        }\n        return await response.json();\n    } catch (e) {\n        throw Error('Network request failed');\n    }\n}\n\nasync function post(url, body) {\n    try {\n        let response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                ApiKey: `${process.env.REACT_APP_APIKEY}`\n            },\n            body: JSON.stringify(body),\n        });\n        if (!response.ok) {\n            throw Error('Network request failed');\n        }\n    } catch (e) {\n        throw Error('Network request failed');\n    }\n}\n\n","\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux'\nimport { nameChanged } from '../reducers/actions';\nimport { updateHighScoreList } from '../reducers/thunks';\nimport PropTypes from 'prop-types';\n\nconst EnterName = props => {\n\n    const [userName, setUserName] = useState('');\n\n    return <>\n        <div>\n            YOU MADE IT TO #{props.highScorePosition} on the leaderboard!\n        </div>\n        Enter your name:\n        <input\n            type='text'\n            minLength='3' maxLength='25'\n            required\n            onChange={(event) => {\n                setUserName(event.target.value);\n                props.onNameChanged(event.target.value);\n            }}\n            disabled={props.nameSubmitted}\n        />\n        <div>\n            {userName.length >= 3 && userName.length <= 25 &&\n                <button className='game-button' onClick={() => props.onSubmitNameToHighScore(userName)}\n                    disabled={props.nameSubmitted}\n                >Submit</button>\n            }\n        </div>\n    </>;\n}\n\nEnterName.propTypes = {\n    highScorePosition: PropTypes.number,\n    onNameChanged: PropTypes.func,\n    onSubmitNameToHighScore: PropTypes.func,\n    nameSubmitted: PropTypes.bool\n};\n\nconst mapStateToProps = state => {\n    return {\n        highScorePosition: state.highScorePosition,\n        highScoreList: state.highScoreList,\n        nameSubmitted: state.nameSubmitted\n    };\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSubmitNameToHighScore: () => {\n            dispatch(updateHighScoreList);\n        },\n        onNameChanged: (name) => {\n            dispatch(nameChanged(name));\n        }\n    }\n}\n\nconst EnterNameView = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(EnterName)\n\nexport default EnterNameView;\n","\nimport React from 'react';\nimport { connect } from 'react-redux'\nimport LeaderBoardView from './LeaderBoardView';\nimport EnterNameView from './EnterNameView';\nimport PropTypes from 'prop-types';\nimport { GameId_Medium } from '../constants';\nimport { initGame } from '../reducers/actions';\nimport { fetchHighScoreList, runGameLoop } from '../reducers/thunks';\n\nconst GameStatus = (props) => {\n    if (!props.gameStarted) {\n        return <div>\n            <button className='game-button' onClick={() => props.onInitGame(GameId_Medium)}>Start game</button>\n        </div>\n    }\n    if (props.gameComplete) {\n        return <div className='game-status'>\n            <div><b>GAME OVER!</b></div>\n            <div>You got {props.points} points</div>\n            {(props.highScorePosition > 0) && !props.highScoreListSaved &&\n                <EnterNameView />\n            }\n            {(props.highScorePosition > 0) && props.highScoreListSaved &&\n                <LeaderBoardView\n                    highScoreList={props.highScoreList}\n                    userId={props.userId}\n                />\n            }\n            <button className='game-button' onClick={() => props.onInitGame(GameId_Medium)}>Restart</button>\n        </div>;\n    } else {\n        return <div className='game-status'>\n            Score: <b>{props.points}</b>\n            <div className='game-instructions'>\n                <div>\n                    Use swipe or arrow keys to change direction\n                </div>\n            </div>\n        </div>\n    }\n}\n\nGameStatus.defaultProps = {\n    gameStarted: false\n}\n\nGameStatus.propTypes = {\n    points: PropTypes.number,\n    gameComplete: PropTypes.bool,\n    highScorePosition: PropTypes.number,\n    highScoreListSaved: PropTypes.bool,\n    highScoreList: PropTypes.object,\n    userId: PropTypes.string,\n    onInitGame: PropTypes.func,\n    gameStarted: PropTypes.bool\n};\n\nconst mapStateToProps = state => {\n    return {\n        points: state.points,\n        gameComplete: state.gameComplete,\n        highScorePosition: state.highScorePosition,\n        highScoreListSaved: state.highScoreListSaved,\n        highScoreList: state.highScoreList,\n        userId: state.userId,\n        gameStarted: state.gameStarted\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onInitGame: (gameId) => {\n            dispatch(initGame(gameId));\n            dispatch(fetchHighScoreList);\n            dispatch(runGameLoop);\n        }\n    }\n}\n\nconst GameStatusView = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(GameStatus)\n\nexport default GameStatusView;\n","import React from 'react';\nimport './Game.css';\nimport PropTypes from 'prop-types';\nimport { Id_Border, Id_Empty, Id_Food, Id_SnakeSegMin } from '../constants';\n\nconst TileView = ({ id }) =>\n    <div className='tile'\n        style={getStyleForTile(id)}\n    ></div>;\n\nTileView.propTypes = {\n    id: PropTypes.number\n};\n\nconst getStyleForTile = (id) => {\n    if (id === Id_Empty) {\n        return {\n            backgroundColor: 'white',\n            outline: '1px solid lightgray',\n            outlineOffset: '-1px'\n        };\n    } else if (id >= Id_SnakeSegMin) {\n        return {\n            backgroundColor: `rgba(0,0,0, ${Math.max(0.2, 1.0 / ((id - 2) * 0.6))})`\n        };\n    } else if (id === Id_Food) {\n        return {\n            backgroundColor: 'green'\n        };\n    } else if (id === Id_Border) {\n        return {\n            backgroundColor: 'red'\n        };\n    }\n}\n\nexport default TileView;\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport { Down, GridWidth, Left, Right, Up } from '../constants';\nimport TileView from './TileView'\nimport PropTypes from 'prop-types';\nimport { useSwipeable } from 'react-swipeable';\nimport { changeDirection } from '../reducers/actions';\n\nconst Grid = (props) => {\n    const tileWidth = GridWidth / props.size;\n    const tileWrapperStyle = {\n        width: `${props.size * tileWidth}px`\n    }\n    const tileContainerStyle = {\n        gridTemplateColumns: `repeat(${props.size},${tileWidth}px)`\n    }\n\n    let config = {\n        delta: 5,                             // min distance(px) before a swipe starts\n        preventDefaultTouchmoveEvent: true,   // call e.preventDefault *See Details*\n        trackTouch: true,                     // track touch input\n        trackMouse: false,                    // track mouse input\n        rotationAngle: 0,                     // set a rotation angle\n    }\n\n    const handlers = useSwipeable({\n        onSwipedRight: () => props.onChangeDirection(Right),\n        onSwipedLeft: () => props.onChangeDirection(Left),\n        onSwipedUp: () => props.onChangeDirection(Up),\n        onSwipedDown: () => props.onChangeDirection(Down),\n        ...config\n    });\n\n    return (\n        <div {...handlers} className='tile-wrapper' style={tileWrapperStyle}>\n            <div className='tile-container' style={tileContainerStyle}>\n                {\n                    props.gridViewModel.map((t, idx) => {\n                        return <TileView key={idx}\n                            id={t}\n                        />\n                    })\n                }\n            </div>\n        </div>\n    );\n}\n\nGrid.propTypes = {\n    size: PropTypes.number,\n    gridViewModel: PropTypes.array,\n    onChangeDirection: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n    return {\n        gridViewModel: state.gridViewModel,\n        size: state.size,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onChangeDirection: (direction) => {\n            dispatch(changeDirection(direction));\n        },\n    }\n}\n\nconst GridView = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Grid)\n\nexport default GridView;\n","import React from 'react';\nimport './Game.css';\nimport PropTypes from 'prop-types';\n\nconst GameHeaderView = (props) =>\n    <>\n        <div><h2>{props.gameName}</h2></div>\n    </>;\n\nGameHeaderView.propTypes = {\n    gameName: PropTypes.string,\n};\n\nexport default GameHeaderView;\n","import React from 'react';\nimport './Game.css';\nimport { connect } from 'react-redux'\nimport { changeDirection } from '../reducers/actions';\nimport GameStatusView from './GameStatusView';\nimport { Down, Left, Right, Up } from '../constants';\nimport GridView from './GridView';\nimport PropTypes from 'prop-types';\nimport GameHeaderView from './GameHeaderView';\n\nclass Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const handleOnKeyDown = (event) => {\n            switch (event.keyCode) {\n                case 38: {\n                    this.props.onChangeDirection(Up);\n                    break;\n                }\n                case 40: {\n                    this.props.onChangeDirection(Down);\n                    break;\n                }\n                case 37: {\n                    this.props.onChangeDirection(Left);\n                    break;\n                }\n                case 39: {\n                    this.props.onChangeDirection(Right);\n                    break;\n                }\n            }\n            if (!this.props.gameComplete && this.props.gameStarted) {\n                event.preventDefault();\n            }\n        }\n        document.addEventListener('keydown', handleOnKeyDown, false);\n    }\n\n    render() {\n        return (\n            <div className='game'>\n                <GameHeaderView gameName={this.props.gameName} />\n                <GameStatusView />\n                <GridView />\n            </div>\n        );\n    }\n}\n\nGame.defaultProps = {\n    gameStarted: false,\n    gameComplete: false\n}\n\nGame.propTypes = {\n    gameName: PropTypes.string,\n    onChangeDirection: PropTypes.func,\n    gameComplete: PropTypes.bool,\n    gameStarted: PropTypes.bool\n};\n\n\nconst mapStateToProps = state => {\n    return {\n        gameName: state.gameName,\n        gameComplete: state.gameComplete,\n        gameStarted: state.gameStarted\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onChangeDirection: (direction) => {\n            dispatch(changeDirection(direction));\n        }\n    }\n}\n\nconst GameView = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Game)\n\nexport default GameView;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport snakeGame from './reducers/snake-game-reducer';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport GameView from './views/GameView';\n\n// For integration with Redux DevTools in browser\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(snakeGame, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nReactDOM.render(\n    <Provider store={store}>\n        <GameView />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}